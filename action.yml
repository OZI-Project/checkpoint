name: ozi-checkpoint
description: "OZI continous integration checkpoint action."
author: "Ross J. Duff (Eden Rose) MSc <help@oziproject.dev>"
branding:
  icon: check-circle
  color: green
inputs:
  python-version:
    description: "Python version to checkpoint"
    required: true
  parallel:
    description: "Whether to run checkpoints in parallel."
    required: true
    default: "true"
  os:
    description: "Operating system to run on"
    required: false
    default: "ubuntu-latest"
  submodules:
    description: "Whether to fetch git submodules."
    required: false
    default: ""
  freethreaded:
    description: "Enable freethreaded Python when available."
    default: false
  args:
    description: posargs for tox
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        fetch-depth: 0
        submodules: '${{ inputs.submodules }}'

    - name: Set up Python ${{ inputs.python-version }}
      if: ${{ fromJSON(inputs.python-version) >= 3.13 }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        cache: 'pip'
        python-version: ${{ inputs.python-version }}
        allow-prereleases: true
        check-latest: true
        freethreaded: ${{ fromJSON(inputs.freethreaded) }}

    - name: Set up Python ${{ inputs.python-version }}
      if: ${{ fromJSON(inputs.python-version) < 3.13 }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        cache: 'pip'
        python-version: ${{ inputs.python-version }}
        cache-dependency-path: .tox/**/tmp/**/requirements.txt
        allow-prereleases: true
        check-latest: true

    - name: Install CI backend
      run: |
        python -m pip install --user -r ${GITHUB_ACTION_PATH}/requirements.txt
      shell: bash

    - name: Setup virtual environment for invoke
      run: tox -e invoke -- --list
      shell: bash

    - name: Setup pipx path
      run: |
        pipx ensurepath --force
      shell: bash

    - name: Install meson (pipx)
      run: |
        pipx install meson --force
      shell: bash

    - name: Migrate pipx path for Windows
      if: ${{ inputs.os == 'windows-latest' }}
      run: |
        cache_dir=$(pipx environment --value PIPX_VENV_CACHEDIR)
        logs_dir=$(pipx environment --value PIPX_LOG_DIR)
        trash_dir=$(pipx environment --value PIPX_TRASH_DIR)
        home_dir=$(pipx environment --value PIPX_HOME)
        # If you wish another location, replace the expression below
        # and set `NEW_LOCATION` explicitly
        NEW_LOCATION="D:\\a\\pipx"
        rm -rf "$cache_dir" "$logs_dir" "$trash_dir"
        mkdir -p $NEW_LOCATION && mv "$home_dir" $NEW_LOCATION
        pipx reinstall-all
      shell: bash

    - name: 'Run tests (First Try)'
      if: ${{ inputs.parallel != 'true' }}
      continue-on-error: true
      id: setup1
      run: |
        tox
      shell: bash

    - name: 'Run tests (First Try)'
      if: ${{ inputs.parallel == 'true' }}
      continue-on-error: true
      id: setup2
      run: |
        tox run-parallel --parallel-no-spinner
      shell: bash

    - name: Check binary wheel is buildable from sdist
      run: |
        tox -e invoke -- release --no-cibuildwheel
      shell: bash

    - name: 'Run tests (Second Try)'
      if: ${{ (steps.setup1.outcome == 'failure') && (inputs.parallel != 'true') }}
      env:
        TOX_ARGS: ${{ inputs.args }}
      run: |
        tox -r -- $TOX_ARGS
      shell: bash

    - name: 'Run tests (Second Try)'
      if: ${{ (steps.setup2.outcome == 'failure') && (inputs.parallel == 'true') }}
      env:
        TOX_ARGS: ${{ inputs.args }}
      run: |
        tox run-parallel -r --parallel-no-spinner -- $TOX_ARGS
      shell: bash

    - uses: sigstore/gh-action-sigstore-python@f514d46b907ebcd5bedc05145c03b69c1edd8b46
      with:
        inputs: |
          .tox/dist/tmp/meson-logs/testlog-dist.txt
          .tox/lint/tmp/meson-logs/testlog-lint.txt
          .tox/test/tmp/meson-logs/testlog-test.txt
        upload-signing-artifacts: true
    
    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      if: always()
      with:
        name: ${{ inputs.os }}-${{ inputs.python-version }}-checkpoint
        path: |
          .tox/dist/tmp/meson-logs/testlog-dist.txt
          .tox/lint/tmp/meson-logs/testlog-lint.txt
          .tox/test/tmp/meson-logs/testlog-test.txt
