name: ozi-checkpoint
description: "OZI continous integration checkpoint action."
author: "Ross J. Duff (Eden Rose) MSc <help@oziproject.dev>"
branding:
  icon: check-circle
  color: green
inputs:
  python-version:
    description: "Python version to checkpoint"
    required: true
  parallel:
    description: "Whether to run checkpoints in parallel."
    required: true
    default: "true"
  os:
    description: "Operating system to run on"
    required: false
    default: "ubuntu-latest"
  args:
    description: posargs for tox
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Get OZI specification API
      id: api
      run: |
        api=$( curl -L https://oziproject.dev/api.json )
        echo "tox=$( $api | jq -c '.spec.python.ci.backend.tox' )" >> $GITHUB_OUTPUT
        echo "tox-gh=$( $api | jq -c '.spec.python.ci.backend."tox-gh"' )" >> $GITHUB_OUTPUT
      shell: bash

    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        cache: 'pip'
        cache-dependency-path: |
          .tox/**/tmp/**/requirements.txt
        python-version: '${{ inputs.python-version }}'
        allow-prereleases: true
        check-latest: true

    - name: Install CI backend
      run: |
        python -m pip install --user ${{ steps.api.outputs.tox }}
        python -m pip install --user ${{ steps.api.outputs.tox-gh }}
        python -m pip install --user pipx~=1.7
      shell: bash

    - name: Setup pipx path
      run: |
        pipx ensurepath --force
      shell: bash

    - name: Install meson (pipx)
      run: |
        pipx install meson --force
      shell: bash

    - name: Migrate pipx path for Windows
      if: ${{ inputs.os == 'windows-latest' }}
      run: |
        cache_dir=$(pipx environment --value PIPX_VENV_CACHEDIR)
        logs_dir=$(pipx environment --value PIPX_LOG_DIR)
        trash_dir=$(pipx environment --value PIPX_TRASH_DIR)
        home_dir=$(pipx environment --value PIPX_HOME)
        # If you wish another location, replace the expression below
        # and set `NEW_LOCATION` explicitly
        NEW_LOCATION="D:\\a\\pipx"
        rm -rf "$cache_dir" "$logs_dir" "$trash_dir"
        mkdir -p $NEW_LOCATION && mv "$home_dir" $NEW_LOCATION
        pipx reinstall-all
      shell: bash

    - name: Install core build deps for Windows
      if: ${{ inputs.os == 'windows-latest' }}
      run: |
        pip install OZI.build[core]
      shell: bash

    - name: 'Run tests (First Try)'
      if: ${{ inputs.parallel != 'true' }}
      continue-on-error: true
      id: setup1
      run: |
        tox
      shell: bash

    - name: 'Run tests (First Try)'
      if: ${{ inputs.parallel == 'true' }}
      continue-on-error: true
      id: setup2
      run: |
        tox run-parallel --parallel-no-spinner
      shell: bash

    - name: Check binary wheel is buildable from sdist
      run: |
        tox -e invoke -- release --no-cibuildwheel
      shell: bash

    - name: 'Run tests (Second Try)'
      if: ${{ (steps.setup1.outcome == 'failure') && (inputs.parallel != 'true') }}
      run: |
        tox -r -- ${{ inputs.args }}
      shell: bash

    - name: 'Run tests (Second Try)'
      if: ${{ (steps.setup2.outcome == 'failure') && (inputs.parallel == 'true') }}
      run: |
        tox run-parallel -r --parallel-no-spinner -- ${{ inputs.args }}
      shell: bash

    - uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: |
          .tox/dist/tmp/meson-logs/testlog-dist.txt
          .tox/lint/tmp/meson-logs/testlog-lint.txt
          .tox/test/tmp/meson-logs/testlog-test.txt
        upload-signing-artifacts: true
    
    - uses: actions/upload-artifact@v4.4.3
      if: always()
      with:
        name: ${{ inputs.os }}-${{ inputs.python-version }}-checkpoint
        path: |
          .tox/dist/tmp/meson-logs/testlog-dist.txt
          .tox/lint/tmp/meson-logs/testlog-lint.txt
          .tox/test/tmp/meson-logs/testlog-test.txt
